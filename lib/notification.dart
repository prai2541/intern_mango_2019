import 'package:app_ui/normalAlertDetail.dart';
//import 'package:badges/badges.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

var json = {
  "years": [
    {
      "year": "2019",
      "months": [
        {
          "month": "January",
          "days": [
            {
              "day": "12 January 2019",
              "datas": [
                {
                  "duedate": "2 August 2019",
                  "project": "test",
                  "creditType": "test",
                  "document": "test",
                  "bgch": "1234",
                  "creditLine": "test",
                  "bank": "test",
                  "branch": "test",
                  "amount": "100000000"
                },
                {
                  "duedate": "3 August 2019",
                  "project": "test",
                  "creditType": "test",
                  "document": "test",
                  "bgch": "1234",
                  "creditLine": "test",
                  "bank": "test",
                  "branch": "test",
                  "amount": "50000000"
                }
              ]
            },
            {
              "day": "14 January 2019",
              "datas": [
                {
                  "duedate": "2 August 2019",
                  "project": "test",
                  "creditType": "test",
                  "document": "test",
                  "bgch": "1234",
                  "creditLine": "test",
                  "bank": "test",
                  "branch": "test",
                  "amount": "100000000"
                }
              ]
            },
          ]
        },
        {"month": "February"},
        {"month": "March"}
      ]
    },
    {
      "year": "2018",
      "months": [
        {
          "month": "January",
          "days": [
            {
              "day": "12 January 2018",
              "datas": [
                {
                  "duedate": "2 August 2018",
                  "project": "test",
                  "creditType": "test",
                  "document": "test",
                  "bgch": "1234",
                  "creditLine": "test",
                  "bank": "test",
                  "branch": "test",
                  "amount": "100000000"
                },
                {
                  "duedate": "3 August 2018",
                  "project": "test",
                  "creditType": "test",
                  "document": "test",
                  "bgch": "1234",
                  "creditLine": "test",
                  "bank": "test",
                  "branch": "test",
                  "amount": "50000000"
                }
              ]
            },
            {
              "day": "14 January 2018",
              "datas": [
                {
                  "duedate": "2 August 2018",
                  "project": "test",
                  "creditType": "test",
                  "document": "test",
                  "bgch": "1234",
                  "creditLine": "test",
                  "bank": "test",
                  "branch": "test",
                  "amount": "100000000"
                }
              ]
            },
          ]
        },
        {"month": "February"},
        {"month": "March"}
      ]
    }
  ]
};

var rawData = Autogenerated.fromJson(json);

//Class generated by https://javiercbk.github.io/json_to_dart/
class Autogenerated {
  List<Years> years;

  Autogenerated({this.years});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    if (json['years'] != null) {
      years = new List<Years>();
      json['years'].forEach((v) {
        years.add(new Years.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.years != null) {
      data['years'] = this.years.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Years {
  String year;
  List<Months> months;

  Years({this.year, this.months});

  Years.fromJson(Map<String, dynamic> json) {
    year = json['year'];
    if (json['months'] != null) {
      months = new List<Months>();
      json['months'].forEach((v) {
        months.add(new Months.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['year'] = this.year;
    if (this.months != null) {
      data['months'] = this.months.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Months {
  String month;
  List<Days> days;

  Months({this.month, this.days});

  Months.fromJson(Map<String, dynamic> json) {
    month = json['month'];
    if (json['days'] != null) {
      days = new List<Days>();
      json['days'].forEach((v) {
        days.add(new Days.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['month'] = this.month;
    if (this.days != null) {
      data['days'] = this.days.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Days {
  String day;
  List<Datas> datas;

  Days({this.day, this.datas});

  Days.fromJson(Map<String, dynamic> json) {
    day = json['day'];
    if (json['datas'] != null) {
      datas = new List<Datas>();
      json['datas'].forEach((v) {
        datas.add(new Datas.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['day'] = this.day;
    if (this.datas != null) {
      data['datas'] = this.datas.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Datas {
  String duedate;
  String project;
  String creditType;
  String document;
  String bgch;
  String creditLine;
  String bank;
  String branch;
  String amount;

  Datas(
      {this.duedate,
      this.project,
      this.creditType,
      this.document,
      this.bgch,
      this.creditLine,
      this.bank,
      this.branch,
      this.amount});

  Datas.fromJson(Map<String, dynamic> json) {
    duedate = json['duedate'];
    project = json['project'];
    creditType = json['creditType'];
    document = json['document'];
    bgch = json['bgch'];
    creditLine = json['creditLine'];
    bank = json['bank'];
    branch = json['branch'];
    amount = json['amount'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['duedate'] = this.duedate;
    data['project'] = this.project;
    data['creditType'] = this.creditType;
    data['document'] = this.document;
    data['bgch'] = this.bgch;
    data['creditLine'] = this.creditLine;
    data['bank'] = this.bank;
    data['branch'] = this.branch;
    data['amount'] = this.amount;
    return data;
  }
}

class NotificationPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    double defaultScreenWidth = 375.0;
    double defaultScreenHeight = 812.0;

    ScreenUtil.instance = ScreenUtil(
      width: defaultScreenWidth,
      height: defaultScreenHeight,
      allowFontScaling: true,
    )..init(context);

    return Scaffold(
      body: DefaultTabController(
        length: 2,
        child: Scaffold(
          appBar: AppBar(
            backgroundColor: Color(0xff46B5A6),
            iconTheme: IconThemeData(color: Colors.white),
            actions: <Widget>[
              IconButton(
                  icon: Icon(
                    Icons.home,
                    size: ScreenUtil.instance.setSp(30),
                  ),
                  onPressed: () {
                    Navigator.of(context).pushNamedAndRemoveUntil(
                        '/home', (Route<dynamic> route) => false);
                  })
            ],
            bottom: TabBar(
              indicatorColor: Color(0xFFB8001C),
                indicatorWeight: 3.0,
                labelColor: Color(0xFFB8001C),
              tabs: <Widget>[
                Tab(
                  child: Text(
                    "Normal Alert",
                    style: TextStyle(
                        color: Colors.white,
                        fontSize: ScreenUtil.instance.setSp(16)),
                  ),
                ),
                Tab(
                    child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                      Expanded(
                          child: Text(
                        "Collateral Amount",
                        style: TextStyle(
                            color: Colors.white,
                            fontSize: ScreenUtil.instance.setSp(16)),
                      )),
                      Expanded(
                          child: Text(
                        "Alert",
                        style: TextStyle(
                            color: Colors.white,
                            fontSize: ScreenUtil.instance.setSp(16)),
                      ))
                    ]))
              ],
            ),
            title: Text('Notification', style: TextStyle(color: Colors.white)),
          ),
          body: TabBarView(
            children: <Widget>[
              NormalAlert(), 
              CollateralAlert()
            ],
          ),
        ),
      ),
    );
  }
}

class NormalAlert extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      itemCount: rawData.years.length,
      itemBuilder: (context, i) {
        return ExpansionTile(
          leading: Icon(Icons.list),
          title: Text('Normal Amount Alert ${rawData.years[i].year}',
              style: TextStyle(fontSize: ScreenUtil.instance.setSp(16))),
          children: [
            Container(
                margin: EdgeInsets.only(left: ScreenUtil.instance.setWidth(15), right: ScreenUtil.instance.setWidth(15), bottom: 10),
                child: ListView.builder(
                    shrinkWrap: true,
                    itemCount: rawData.years[i].months.length,
                    itemBuilder: (context, j) {
                      if (rawData.years[i].months[j].days != null) {
                        return ExpansionTile(
                          leading: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  Icons.calendar_today,
                                  size: ScreenUtil.instance.setSp(22.5),
                                )
                              ]),
                          title: Text(
                              '${rawData.years[i].months[j].month} ${rawData.years[i].year}',
                              style: TextStyle(
                                  fontSize: ScreenUtil.instance.setSp(16))),
                          children: <Widget>[
                            Container(
                              margin: EdgeInsets.only(
                                  left: ScreenUtil.instance.setWidth(30),
                                  right: ScreenUtil.instance.setWidth(10),
                                  bottom: ScreenUtil.instance.setHeight(10)),
                              child: ListView.builder(
                                shrinkWrap: true,
                                itemCount:
                                    rawData.years[i].months[j].days.length,
                                itemBuilder: (context, k) {
                                  return ListTile(
                                    title: Text(
                                        '${rawData.years[i].months[j].days[k].day}',
                                        style: TextStyle(
                                            fontSize:
                                                ScreenUtil.instance.setSp(16))),
                                    trailing: Icon(
                                      Icons.arrow_forward_ios,
                                      size: ScreenUtil.instance.setHeight(16),
                                    ),
                                    onTap: () {
                                      Navigator.of(context).push(
                                          MaterialPageRoute(
                                              builder: (context) =>
                                                  new NormalAlertDetail(
                                                      rawData.years[i].months[j]
                                                          .days[k].day,
                                                      rawData.years[i].months[j]
                                                          .days[k].datas)));
                                    },
                                  );
                                },
                              ),
                            )
                          ],
                        );
                      } else {
                        return ListTile(
                          leading: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  Icons.calendar_today,
                                  size: ScreenUtil.instance.setSp(22.5),
                                )
                              ]),
                          title: Text(
                              '${rawData.years[i].months[j].month} ${rawData.years[i].year}',
                              style: TextStyle(
                                  fontSize: ScreenUtil.instance.setSp(16))),
                        );
                      }
                    }))
          ],
        );
      },
    );
  }
}

class CollateralAlert extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      itemCount: rawData.years.length,
      itemBuilder: (context, i) {
        return ExpansionTile(
          leading: Icon(Icons.list),
          title: Text('Collateral Amount Alert ${rawData.years[i].year}',
              style: TextStyle(fontSize: ScreenUtil.instance.setSp(16))),
          children: [
            Container(
                margin: EdgeInsets.only(left: 10, right: 10, bottom: 10),
                child: ListView.builder(
                    shrinkWrap: true,
                    itemCount: rawData.years[i].months.length,
                    itemBuilder: (context, j) {
                      if (rawData.years[i].months[j].days != null) {
                        return Card(
                            child: ExpansionTile(
                          leading: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  Icons.calendar_today,
                                  size: ScreenUtil.instance.setSp(22.5),
                                )
                              ]),
                          title: Text(
                              '${rawData.years[i].months[j].month} ${rawData.years[i].year}',
                              style: TextStyle(
                                  fontSize: ScreenUtil.instance.setSp(16))),
                          children: <Widget>[
                            Container(
                              margin: EdgeInsets.only(
                                  left: ScreenUtil.instance.setWidth(20),
                                  right: ScreenUtil.instance.setWidth(10),
                                  bottom: ScreenUtil.instance.setHeight(10)),
                              child: ListView.builder(
                                shrinkWrap: true,
                                itemCount:
                                    rawData.years[i].months[j].days.length,
                                itemBuilder: (context, k) {
                                  return Container(
                                      child: ListTile(
                                    title: Text(
                                        '${rawData.years[i].months[j].days[k].day}',
                                        style: TextStyle(
                                            fontSize:
                                                ScreenUtil.instance.setSp(16))),
                                    trailing: Icon(
                                      Icons.arrow_forward_ios,
                                      size: ScreenUtil.instance.setHeight(16),
                                    ),
                                    onTap: () {},
                                  ));
                                },
                              ),
                            )
                          ],
                        ));
                      } else {
                        return Card(
                          child: ListTile(
                            leading: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Icon(
                                    Icons.calendar_today,
                                    size: ScreenUtil.instance.setSp(22.5),
                                  )
                                ]),
                            title: Text(
                                '${rawData.years[i].months[j].month} ${rawData.years[i].year}',
                                style: TextStyle(
                                    fontSize: ScreenUtil.instance.setSp(16))),
                          ),
                        );
                      }
                    }))
          ],
        );
      },
    );
  }
}
